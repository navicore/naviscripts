" --------- OSX ---------
" defaults write com.jetbrains.intellij.ce ApplePressAndHoldEnabled -bool false
" brew install exa python3 fzf ripgrep libxml2 xml2 libgit2 reattach-to-user-namespace nvm zplug zsh-history-substring-search nailgun zsh cmake tmux sbt graphviz pandoc hub
" pip3 install neovim --upgrade
" brew install neovim/neovim/neovim
" brew install --HEAD olafurpg/scalafmt/scalafmt
" THIS nonsense fixes the python3 host load bug that shows on both vim and nvim.
" pip install --no-cache-dir --upgrade --force-reinstall neovim
" pip3 install --no-cache-dir --upgrade --force-reinstall neovim
" brew install macvim --HEAD --with-override-system-vim --with-lua --with-python3
"
" --------- LNX --------- (debian-based)
" apt install build-essential python-dev cmake zsh
"
" --------- ALL ---------
"  NOTE: not sure when but I started aliasing vim to nvim and didn't notice
"  for many weeks.  must be fine to only use nvim!
" nvm install stable
" nvm use stable
" npm i -g babel-eslint eslint eslint-config-airbnb eslint-plugin-import

let g:python3_host_prog = '/usr/local/bin/python3'
let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Linux"
  let g:python3_host_prog = "/usr/bin/python3"
endif

" BEGIN R:
"
" my_packages <- c("tidyverse", "broom", "coefplot", "cowplot", "gapminder", "GGally", "ggrepel", "ggridges", "gridExtra", "here", "interplot", "margins", "maps", "mapproj", "mapdata", "MASS", "quantreg", "rlang", "scales", "survey", "srvyr", "viridis", "viridisLite", "devtools", "lintr", "plumber", "rmarkdown", "ggthemes")
" install.packages(my_packages, repos = "https://cran.rstudio.com")
"
" tinytex::install_tinytex() 
"
" END R:
"
" BEGIN VUNDLE:
"
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" mkdir -p ~/.vim/swapfiles
" restart vim :BundleInstall
" eval `ssh-agent -s`
" ssh-add
" clean ~/.vim/bundle/YouCompleteMe with: rm -rf third_party/ycmd/third_party/tern_runtime/node_modules 
" build ~/.vim/bundle/YouCompleteMe with: ./install.py --clang-completer --gocode-completer --ts-completer --rust-completer
"
" END VUNDLE:
"
" BEGIN RUST:
"
" curl https://sh.rustup.rs -sSf | sh
" rustup component add rls-preview rust-analysis rust-src
" rustup component add rustfmt-preview
" ssh-add -K ~/.ssh/id_rsa
"
" END RUST:
"
" BEGIN HASKELL:
"
" curl -sSL https://get.haskellstack.org/ | sh
" git clone git@github.com:olivierverdier/zsh-git-prompt.git ~/tmp/zsh-git-prompt
" for haskell above: stack setup && stack build && stack install
"
" END HASKELL:
"
" BEGIN PYTHON:
"
" sudo pip install flake8 jedi
" sudo pip3 install flake8 jedi
" pip3 install argcomplete 
" activate-global-python-argcomplete
"
" END PYTHON:
"
" https://scalameta.org/metals/docs/editors/vim.html
" install https://github.com/romainl/flattened
"
" build ~/.vim/bundle/vimproc.vim with: make
"
" nerd fonts
" https://github.com/ryanoasis/nerd-fonts#option-3-install-script
"

syntax on

:set nu
set nocompatible " be iMproved
filetype off     " required!

set directory=~/.vim/swapfiles// 

set hidden
set expandtab
set tabstop=2
set shiftwidth=2

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'mlaursen/vim-react-snippets'
Plugin 'leafgarland/typescript-vim'
Plugin 'flowtype/vim-flow.git'
Plugin 'mxw/vim-jsx'
Plugin 'prettier/prettier'
Plugin 'pangloss/vim-javascript'
Plugin 'airblade/vim-gitgutter'
Plugin 'Shougo/vimproc.vim.git'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'aklt/plantuml-syntax'
Plugin 'chrisbra/csv.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'derekwyatt/vim-sbt'
Plugin 'derekwyatt/vim-scala'
Plugin 'diepm/vim-rest-console'
Plugin 'elixir-editors/vim-elixir'
Plugin 'ervandew/screen'
Plugin 'fatih/vim-go'
Plugin 'gmarik/vundle'
Plugin 'godlygeek/tabular'
Plugin 'jalvesaq/Nvim-R'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'navicore/vis.vim'
Plugin 'navicore/vissort.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'ryanoasis/vim-devicons'
Plugin 'scrooloose/nerdtree'
Plugin 'slashmili/alchemist.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-fireplace.git'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax' 
Plugin 'dense-analysis/ale'
Plugin 'wannesm/wmgraphviz.vim'
Plugin 'neovimhaskell/haskell-vim'

" YouCompleteMe and UltiSnips compatibility, with the helper of supertab
" (via http://stackoverflow.com/a/22253548/1626737)
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<C-j>'
let g:UltiSnipsJumpForwardTrigger      = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger     = '<C-k>'
let g:ycm_key_list_select_completion   = ['<tab>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<C-p>', '<Up>']
let g:UltiSnipsSnippetDirectories      = ['~/.vim/UltiSnips', 'UltiSnips']

" elixir
let g:alchemist#elixir_erlang_src = "~/tmp/sources"
let g:alchemist_tag_map = '<C-]>'
let g:alchemist_tag_stack_map = '<C-T>'

let NERDTreeShowHidden=1

filetype plugin indent on     " required!

set completeopt-=preview

" ale airline text
let g:airline#extensions#ale#enabled = 1

"let g:ale_rust_rls_toolchain = 'stable' " this is needed, otherwise rls uses nightly toolchain
let g:ale_rust_rls_toolchain = ''
let g:ale_linters_explicit = 1
let g:ale_linter_aliases = {'r': ['r', 'rmd']}
let g:ale_linters = {'rust': ['rls'], 'javascript': ['eslint'], 'r': ['lintr'], 'scala': ['scalafmt', 'sbtserver', 'fsc'], 'python': ['flake8'], 'typescript': ['tslint'] }
let g:ale_fixers = { 'javascript': ['prettier'], 'css': ['prettier'], 'r': ['styler'], 'typescript': ['tslint'] }

"dot / graphiz
let g:WMGraphviz_dot = 'dot'
let g:WMGraphviz_output = 'png'
let g:WMGraphviz_viewer = 'open'

set autoread

set statusline+=%#warningmsg#
set statusline+=%*

let g:ScreenImpl = 'Tmux'

nmap <F4> :w<CR>:make<CR>:copen<CR>

function SetIDEOptions()
  if isdirectory('.git')
    "CtrlP
    NERDTree
    "Tagbar
  endif
endfunction

map <leader>f :ALEFix<CR>

autocmd vimenter * if !argc() | call SetIDEOptions() | endif
map <C-n> :NERDTreeToggle<CR>

map <C-t> :TagbarToggle<CR>

"set the source for autocomplete
set complete=.,w,b,u,t,i

set tags=./.tags;,.tags;

set spell
set spelllang=en_us

"hit enter after search to remove highlights
set hlsearch
nnoremap <CR> :nohlsearch<CR><CR>

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

set colorcolumn=81

"set listchars=tab:>~,nbsp:_,trail:.
"set list

xnoremap . :normal .<CR>

"buble single line
nmap <C-k> ddkP
nmap <C-j> ddp

"buble multiple lines
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]

let g:vrc_output_buffer_name = '__VRC_OUTPUT.json'
let g:vrc_curl_opts = {
  \ '--connect-timeout' : 5,
  \ '--max-time': 60,
  \ '--ipv4': '',
  \ '-ks': '',
\}

set clipboard=unnamed

if filereadable(glob('./.vimrc.local'))
     so ./.vimrc.local
endif

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

au BufRead,BufNewFile *.sbt set filetype=sbt

"plantuml
autocmd BufWritePost,FileWritePost *.uml :silent make

" START color toggle
set background=dark
colorscheme flattened_dark

map <F5> :call ToggleBg()<CR>
function! ToggleBg()
  if &background == 'dark'
    set bg=light
    colorscheme flattened_light
  else
    set bg=dark
    colorscheme flattened_dark
  endif
endfunc
" END color toggle

" unfortunately this only helps vim.  doesn't fix the bazillion other *nix
" shells I use VI mode with :|   not happy with post '15 apple
inoremap jj <Esc>`^

" START for devicons
set encoding=utf8
"set guifont=DroidSansMono\ Nerd\ Font:h11
let g:airline_powerline_fonts = 1
"set macligatures
set guifont=Fira\ Code:h12
" END for devicons

"golang stuff...
let mapleader = ","
" save when :make is called
set autowrite
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
let g:go_fmt_command = "goimports"
let g:go_textobj_include_function_doc = 0

let g:rustfmt_autosave = 1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" for scala
" Configuration for vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala

" Configuration for vim-lsc
" let g:lsc_enable_autocomplete = v:false
" let g:lsc_server_commands = {
"   \ 'scala': 'metals-vim'
"   \}
" let g:lsc_auto_map = {
"     \ 'GoToDefinition': 'gd',
"     \}

vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#syntax#conceal#use = 0
let R_assign = 0

set clipboard+=unnamedplus

