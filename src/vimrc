" --------- LNX --------- (debian-based)
" apt install build-essential python-dev cmake zsh
" apt install neovim
"
" --------- OSX ---------
" defaults write com.jetbrains.intellij.ce ApplePressAndHoldEnabled -bool false
" brew install exa python3 fzf ripgrep libxml2 xml2 libgit2 reattach-to-user-namespace nvm zplug zsh-history-substring-search nailgun cmake tmux sbt graphviz pandoc hub neovim readline xz
" XXXXXXXXXXXXXXXXXXXXX not needed??? pip3 install neovim
"
" --------- ALL ---------
" nvm install stable
" nvm use stable
" npm i -g babel-eslint eslint eslint-config-airbnb eslint-plugin-import
"
" --------- DENO ---------
" curl -fsSL https://deno.land/x/install/install.sh | sh
" 
" --------- CocInstall ---------
" 
" :CocInstall coc-java coc-metals coc-rust-analyzer coc-jedi coc-json coc-tsserver coc-prettier coc-sh coc-markdownlint
"
" in each node project: npm install prettier -D --save-exact

let g:python3_host_prog = '/usr/local/bin/python3'
let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Linux"
  let g:python3_host_prog = "/usr/bin/python3"
endif

" BEGIN R:
"
" apt install libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
"
" my_packages <- c("tidyverse", "broom", "coefplot", "cowplot", "gapminder", "GGally", "ggrepel", "ggridges", "gridExtra", "here", "interplot", "margins", "maps", "mapproj", "mapdata", "MASS", "quantreg", "rlang", "scales", "survey", "srvyr", "viridis", "viridisLite", "devtools", "lintr", "plumber", "rmarkdown", "ggthemes", "httr", "gert", "languageserver")
" install.packages(my_packages, repos = "https://cran.rstudio.com")
"
" tinytex::install_tinytex() 
"
" END R:
"

" 
" using vim-plug plugin manager
" 
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" 

"
" mkdir -p ~/.vim/swapfiles
" restart vim :PlugInstall
" eval `ssh-agent -s`
" ssh-add
"
" BEGIN RUST:
"
" curl https://sh.rustup.rs -sSf | sh
" rustup component add rls-preview rust-analysis rust-src
" rustup component add rustfmt-preview
" ssh-add -K ~/.ssh/id_rsa
"
" END RUST:
"
" BEGIN HASKELL:
"
" curl -sSL https://get.haskellstack.org/ | sh
" git clone git@github.com:olivierverdier/zsh-git-prompt.git ~/tmp/zsh-git-prompt
" for haskell above: stack setup && stack build && stack install
"
" END HASKELL:
"
" BEGIN PYTHON:
"
" sudo pip3 install flake8 jedi
" pip3 install argcomplete 
" activate-global-python-argcomplete
"
" END PYTHON:
"
" install https://github.com/romainl/flattened
"
" build ~/.vim/bundle/vimproc.vim with: make
"
" nerd fonts
" https://github.com/ryanoasis/nerd-fonts#option-3-install-script
"
"
" GIT CONFIG
"
" git config --global core.excludesfile '~/.gitignore'
"
" END GIT CONFIG
"
" install more k8s stuff
"
" kind https://kind.sigs.k8s.io/docs/user/quick-start/
" 	% kind completion zsh > /usr/local/share/zsh/site-functions/_kind
"
" flux2 https://fluxcd.io/docs/get-started/
" 	% flux completion zsh > /usr/local/share/zsh/site-functions/_flux
"
" install k3d
"
syntax on

:set nu
set nocompatible " be iMproved
filetype off     " required!

set directory=~/.vim/swapfiles// 

set hidden
set expandtab
set tabstop=2
set shiftwidth=2

call plug#begin('~/.vim/bundle')

Plug 'neoclide/coc-prettier'
Plug 'mattn/calendar-vim'
Plug 'rhysd/committia.vim'
Plug 'tpope/vim-fugitive'
Plug 'ervandew/supertab'
Plug 'leafgarland/typescript-vim'
Plug 'pangloss/vim-javascript'
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'aklt/plantuml-syntax'
Plug 'chrisbra/csv.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'derekwyatt/vim-sbt'
Plug 'derekwyatt/vim-scala'
Plug 'neoclide/coc.nvim'
Plug 'ervandew/screen'
Plug 'fatih/vim-go'
Plug 'godlygeek/tabular'
Plug 'jalvesaq/Nvim-R'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'navicore/vis.vim'
Plug 'navicore/vissort.vim'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdtree'
Plug 'slashmili/alchemist.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax' 
Plug 'dense-analysis/ale'
Plug 'wannesm/wmgraphviz.vim'
Plug 'neovimhaskell/haskell-vim'
Plug 'diepm/vim-rest-console'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

call plug#end()

set nofoldenable
let g:csv_nomap_bs = 1
let g:csv_nomap_cr = 1
let g:csv_nomap_space = 1

let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0

let NERDTreeShowHidden=1

filetype plugin indent on     " required!

set completeopt-=preview

" ale airline text
let g:airline#extensions#ale#enabled = 1

"let g:ale_rust_rls_toolchain = 'stable' " this is needed, otherwise rls uses nightly toolchain
let g:ale_rust_rls_toolchain = ''
let g:ale_linters_explicit = 1
let g:ale_linter_aliases = {'r': ['r', 'rmd']}
let g:ale_linters = {'rust': ['cargo', 'rls'], 'javascript': ['eslint'], 'r': ['lintr'], 'scala': ['scalafmt', 'sbtserver', 'fsc'], 'python': ['flake8', 'pylint'], 'typescript': ['tslint'] }
let g:ale_fixers = { 'javascript': ['prettier'], 'css': ['prettier'], 'r': ['styler'], 'typescript': ['tslint'] }

"dot / graphiz
let g:WMGraphviz_dot = 'dot'
let g:WMGraphviz_output = 'png'
let g:WMGraphviz_viewer = 'open'

set autoread

set statusline+=%#warningmsg#
set statusline+=%*

let g:ScreenImpl = 'Tmux'

nmap <F4> :w<CR>:make<CR>:copen<CR>

function SetIDEOptions()
  if isdirectory('.git')
    "CtrlP
    NERDTree
    "Tagbar
  endif
endfunction

map <leader>f :ALEFix<CR>

autocmd vimenter * if !argc() | call SetIDEOptions() | endif
map <C-n> :NERDTreeToggle<CR>

map <C-t> :TagbarToggle<CR>

"set the source for autocomplete
set complete=.,w,b,u,t,i

"set tags=./.tags;,.tags;

set spell
set spelllang=en_us

"hit enter after search to remove highlights
set hlsearch
nnoremap <CR> :nohlsearch<CR><CR>

" map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
" map <C-l> <C-w>l

set colorcolumn=81

"set listchars=tab:>~,nbsp:_,trail:.
"set list

xnoremap . :normal .<CR>

"buble single line
" nmap <C-k> ddkP
" nmap <C-j> ddp
"
" "buble multiple lines
" vmap <C-k> xkP`[V`]
" vmap <C-j> xp`[V`]

let g:vrc_output_buffer_name = '__VRC_OUTPUT.json'
let g:vrc_curl_opts = {
  \ '--connect-timeout' : 5,
  \ '--max-time': 60,
  \ '--ipv4': '',
  \ '-ks': '',
\}

set clipboard=unnamed

if filereadable(glob('./.vimrc.local'))
     so ./.vimrc.local
endif

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

au BufRead,BufNewFile *.sbt set filetype=sbt

"plantuml
autocmd BufWritePost,FileWritePost *.uml :silent make

" START color toggle
set background=dark
colorscheme flattened_dark

map <F5> :call ToggleBg()<CR>
function! ToggleBg()
  if &background == 'dark'
    set bg=light
    colorscheme flattened_light
  else
    set bg=dark
    colorscheme flattened_dark
  endif
endfunc
" END color toggle

" unfortunately this only helps vim.  doesn't fix the bazillion other *nix
" shells I use VI mode with :|   not happy with post '15 apple
inoremap jj <Esc>`^

" START for devicons
set encoding=utf8
"set guifont=DroidSansMono\ Nerd\ Font:h11
let g:airline_powerline_fonts = 1
"set macligatures
set guifont=Fira\ Code:h12
" END for devicons

"golang stuff...
let mapleader = ","
" save when :make is called
set autowrite
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
let g:go_fmt_command = "goimports"
let g:go_textobj_include_function_doc = 0

let g:rustfmt_autosave = 1
let g:NERDTreeGitStatusLogLevel = 3
let g:NERDTreeGitStatusUseNerdFonts = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" for scala
" Configuration for vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala

vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#syntax#conceal#use = 0
let R_assign = 0

set clipboard+=unnamedplus

let g:mapleader = '\' " ugh.  this is the default but needed setting anyway :|
nnoremap <Leader>] :YcmCompleter GoTo<CR>

function! s:GoToDefinition()
  if CocAction('jumpDefinition')
    return v:true
  endif

  let ret = execute("silent! normal \<C-]>")
  if ret =~ "Error" || ret =~ "错误"
    call searchdecl(expand('<cword>'))
  endif
endfunction

nmap <silent> gd :call <SID>GoToDefinition()<CR>
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument
