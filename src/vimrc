syntax on

:set nu
set nocompatible " be iMproved
filetype off     " required!

set directory=~/.vim/swapfiles// 

set hidden
set expandtab
set tabstop=2
set shiftwidth=2

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

set nofoldenable
let g:csv_nomap_bs = 1
let g:csv_nomap_cr = 1
let g:csv_nomap_space = 1

filetype plugin indent on     " required!

set completeopt-=preview

" ale airline text
let g:airline#extensions#ale#enabled = 1

"dot / graphiz
let g:WMGraphviz_dot = 'dot'
let g:WMGraphviz_output = 'png'
let g:WMGraphviz_viewer = 'open'

set autoread

set statusline+=%#warningmsg#
set statusline+=%*

let g:ScreenImpl = 'Tmux'

nmap <F4> :w<CR>:make<CR>:copen<CR>

function SetIDEOptions()
  if isdirectory('.git')
    NvimTreeOpen
  endif
endfunction

map <leader>f :ALEFix<CR>

autocmd vimenter * if !argc() | call SetIDEOptions() | endif
map <C-n> :NvimTreeToggle<CR>

"set the source for autocomplete
set complete=.,w,b,u,t,i

set spell
set spelllang=en_us

"hit enter after search to remove highlights
set hlsearch
nnoremap <CR> :nohlsearch<CR><CR>

set colorcolumn=81

xnoremap . :normal .<CR>

let g:vrc_output_buffer_name = '__VRC_OUTPUT.json'
let g:vrc_curl_opts = {
  \ '--connect-timeout' : 5,
  \ '--max-time': 60,
  \ '--ipv4': '',
  \ '-ks': '',
\}

set clipboard=unnamed

if filereadable(glob('./.vimrc.local'))
     so ./.vimrc.local
endif

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

au BufRead,BufNewFile *.sbt set filetype=sbt

"plantuml
autocmd BufWritePost,FileWritePost *.uml :silent make

inoremap jj <Esc>`^

" START for devicons
set encoding=utf8
let g:airline_powerline_fonts = 1
set guifont=Fira\ Code:h12
" END for devicons

"golang stuff...
let mapleader = ","
" save when :make is called
set autowrite
"
let g:rustfmt_autosave = 1

" for scala
" Configuration for vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala

let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#syntax#conceal#use = 0
let R_assign = 0

set textwidth=80
set clipboard+=unnamedplus

" let g:mapleader = '\' " ugh.  this is the default but needed setting anyway :|
" nnoremap <Leader>] :YcmCompleter GoTo<CR>
"
function! s:GoToDefinition()
  if CocAction('jumpDefinition')
    return v:true
  endif

  let ret = execute("silent! normal \<C-]>")
  if ret =~ "Error" || ret =~ "错误"
    call searchdecl(expand('<cword>'))
  endif
endfunction

nmap <silent> gd :call <SID>GoToDefinition()<CR>
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument

" inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

colorscheme terafox
